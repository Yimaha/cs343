2a)
Rule 1 is broken: 
 0. 1 execute to while ( intent[you] ) {}
 1. 0 execute to intent[me] = false;	
 2. swap to 1
 3. while ( intent[you] ) {} is now over, exit the loop
 4. swap to 0
 5. 0 execute to CriticalSection(); note that turn = 0 still
 6. swap to 1
 7. turn = me, so turn = 1
 8. 1 execute to CriticalSection()

 now, both thread are actually in the CriticalSection at the same time, thus Rule 1 violated

Rule 5 is broken:
0. 1 execute to while ( intent[you] ) {}
1. 0 execute to finish intent[me] = false;
2. 0 continue around, execute intent[me] = true;
2. 0 get to run again (through barging)

now, 0 could potentially barge 1 for ever until somehow 1 is able to take check intent[you]
right between the start and end of the 0. Thus Starvation happens

(all other rule is not broken)

2b)

First of all, this is not an infinite thread situtaion, thread do not run for ever, it always terminate.
Thus for Rule 5, it would only really cause problem if there is some time element introduced to it, but 
looking at the code it seems like it doesn't matter who runs first, so starvation doesn't really cause 
a lot of problem here. We don't really care if thread 0 go first or thread 1 go first

when it comes to Rule 1 it is a bit different.

Without the O2 flag, it seems like the program will constantly  cause failure, (thought it does execute for a bit)
but if you enabled the O2 flag, it seems like it is not triggered as often.

The reason why the broken rule doesn't trigger as often is due to the amount 
of step it takes inorder for it to trigger. it needs:
1 - 0 get swap out exactly right after the exit statement
2 - 1 only get to execute once, immediately swap back
3 - 0 keep executing to criticalSection again
4 - 1 can finally go to criticalSection

The part where 1 get executed exactly 1 line and swap back is typically rare 
and is costy in terms of computing power (process switching eat up resources).
Without optimization, it might happen more often, but with a proper optimization (O2) when compiling,
it is unlikely that it would process switching immediately back after being in only for 1 line.

Note that this could also means that starvation is more likely to happen to O2, since 
less context switching is happening.


